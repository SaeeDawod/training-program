[
    {
        "id": "1b72e8d575aef462",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f400539731192b8a",
        "type": "template",
        "z": "1b72e8d575aef462",
        "name": "Game",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Tic Tac Toe</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            height: 100vh;\n            font-family: Arial, sans-serif;\n        }\n\n        #feedback {\n            margin-bottom: 20px;\n            font-size: 1.5em;\n            font-weight: bold;\n        }\n\n        #board {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 10px;\n        }\n\n        .cell {\n            width: 60px;\n            height: 60px;\n            border: 1px solid #000;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 2em;\n        }\n        #player-turn {\n            margin-bottom: 20px;\n            font-size: 1.5em;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"feedback\">Tic Tac Toe</div>\n    <div id=\"player-turn\"> </div>\n    <div id=\"board\"></div>\n    <script src=\"https://cdn.ethers.io/lib/ethers-5.2.umd.min.js\" type=\"application/javascript\"></script>\n    <script>\n        (async () => {\n            // Replace with your contract address\n            const contractAddress = \"0x686497408BDB2Ed17D730bE91714C0168b957e9d\";\n\n            // Replace with your contract ABI\n            const contractABI = [\n                {\n                    \"inputs\": [\n                        {\n                            \"internalType\": \"address\",\n                            \"name\": \"_player2\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"stateMutability\": \"nonpayable\",\n                    \"type\": \"constructor\"\n                },\n                {\n                    \"anonymous\": false,\n                    \"inputs\": [\n                        {\n                            \"indexed\": false,\n                            \"internalType\": \"address\",\n                            \"name\": \"winner\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"name\": \"GameEnded\",\n                    \"type\": \"event\"\n                },\n                {\n                    \"inputs\": [\n                        {\n                            \"internalType\": \"uint8\",\n                            \"name\": \"_x\",\n                            \"type\": \"uint8\"\n                        },\n                        {\n                            \"internalType\": \"uint8\",\n                            \"name\": \"_y\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    \"name\": \"makeMove\",\n                    \"outputs\": [],\n                    \"stateMutability\": \"nonpayable\",\n                    \"type\": \"function\"\n                },\n                {\n                    \"anonymous\": false,\n                    \"inputs\": [\n                        {\n                            \"indexed\": false,\n                            \"internalType\": \"address\",\n                            \"name\": \"player\",\n                            \"type\": \"address\"\n                        },\n                        {\n                            \"indexed\": false,\n                            \"internalType\": \"uint8\",\n                            \"name\": \"x\",\n                            \"type\": \"uint8\"\n                        },\n                        {\n                            \"indexed\": false,\n                            \"internalType\": \"uint8\",\n                            \"name\": \"y\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    \"name\": \"TurnEnded\",\n                    \"type\": \"event\"\n                },\n                {\n                    \"inputs\": [\n                        {\n                            \"internalType\": \"uint256\",\n                            \"name\": \"\",\n                            \"type\": \"uint256\"\n                        },\n                        {\n                            \"internalType\": \"uint256\",\n                            \"name\": \"\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    \"name\": \"board\",\n                    \"outputs\": [\n                        {\n                            \"internalType\": \"uint256\",\n                            \"name\": \"\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    \"stateMutability\": \"view\",\n                    \"type\": \"function\"\n                },\n                {\n                    \"inputs\": [],\n                    \"name\": \"gameOver\",\n                    \"outputs\": [\n                        {\n                            \"internalType\": \"bool\",\n                            \"name\": \"\",\n                            \"type\": \"bool\"\n                        }\n                    ],\n                    \"stateMutability\": \"view\",\n                    \"type\": \"function\"\n                },\n                {\n                    \"inputs\": [],\n                    \"name\": \"getBoard\",\n                    \"outputs\": [\n                        {\n                            \"internalType\": \"uint256[3][3]\",\n                            \"name\": \"\",\n                            \"type\": \"uint256[3][3]\"\n                        }\n                    ],\n                    \"stateMutability\": \"view\",\n                    \"type\": \"function\"\n                },\n                {\n                    \"inputs\": [],\n                    \"name\": \"player1\",\n                    \"outputs\": [\n                        {\n                            \"internalType\": \"address\",\n                            \"name\": \"\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"stateMutability\": \"view\",\n                    \"type\": \"function\"\n                },\n                {\n                    \"inputs\": [],\n                    \"name\": \"player1Turn\",\n                    \"outputs\": [\n                        {\n                            \"internalType\": \"bool\",\n                            \"name\": \"\",\n                            \"type\": \"bool\"\n                        }\n                    ],\n                    \"stateMutability\": \"view\",\n                    \"type\": \"function\"\n                },\n                {\n                    \"inputs\": [],\n                    \"name\": \"player2\",\n                    \"outputs\": [\n                        {\n                            \"internalType\": \"address\",\n                            \"name\": \"\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"stateMutability\": \"view\",\n                    \"type\": \"function\"\n                }\n            ];\n\n            // Create a new provider and set it as the default\n            // Create a new provider and set it as the default\n            const provider = new ethers.providers.JsonRpcProvider('https://rpc.ankr.com/polygon_mumbai');\n\n            console.log('provider', provider);\n\n            // Hardcoded private key\n            // const privateKey = \"9b30a6fd1ce87cb530d2a51bb65c1233613e127c8efb5681d381621e34c68ae6\";\n             const privateKey = \"be1d4269f7fa07e4f98c74a167ba5abefc899bc9242b31d12913e8f9948f273c\";\n\n            const wallet = new ethers.Wallet(privateKey, provider);\n\n            // Create a new contract instance\n            const contract = new ethers.Contract(contractAddress, contractABI, wallet);\n\n            console.log(contract);\n\n            // Get players from contract\n            const player1 = await contract.player1();\n            const player2 = await contract.player2();\n\n            console.log(player1, player2);\n\n            const feedbackElement = document.getElementById(\"feedback\");\n            const playerTurnElement = document.getElementById(\"player-turn\");\n            // Initialize the board\n            async function initializeBoard() {\n                const gameBoard = await contract.getBoard();\n                console.log(gameBoard);\n                for (let x = 0; x < 3; x++) {\n                    for (let y = 0; y < 3; y++) {\n                        const cell = document.createElement(\"div\");\n                        cell.id = `cell-${x}-${y}`;\n                        cell.classList.add(\"cell\");\n\n                        const cellValue = gameBoard[x][y].toNumber(); // Convert BigNumber to number\n                        if (cellValue === 1) {\n                            cell.textContent = \"X\";\n                        } else if (cellValue === 2) {\n                            cell.textContent = \"O\";\n                        }\n\n                        document.getElementById(\"board\").appendChild(cell);\n\n                        // Add event listener to each cell\n                        cell.addEventListener(\"click\", async () => {\n                            // Check if it's the player's turn\n                            const isPlayer1Turn = await contract.player1Turn();\n                            if ((isPlayer1Turn && player1 !== wallet.address) || (!isPlayer1Turn && player2 !== wallet.address)) {\n                                feedbackElement.textContent = \"It's not your turn!\";\n                                return;\n                            }\n\n                            feedbackElement.textContent = \"Processing move...\";\n                            try {\n                                const [x, y] = cell.id.split(\"-\").slice(1).map(Number);\n                                const tx = await contract.makeMove(x, y, { gasLimit: 10000000 });\n                                await tx.wait();\n                                feedbackElement.textContent = \"Move successful!\";\n                            } catch (error) {\n                                console.error(error);\n                                feedbackElement.textContent = \"Move failed!\";\n                            }\n                        });\n                    }\n                }\n            }\n\n            await initializeBoard();\n\n            // Listen for TurnEnded events\n            contract.on(\"TurnEnded\", (player, x, y) => {\n                // Update the UI with the new move\n                console.log('player turn', player);\n                const cell = document.getElementById(`cell-${x}-${y}`);\n                updatePlayerTurn()\n                cell.textContent = player === player1 ? \"X\" : \"O\";\n            });\n\n            // Listen for GameEnded events\n            contract.on(\"GameEnded\", (winner) => {\n                // Announce the winner\n                alert(`Game Over! The winner is ${winner === player1 ? \"Player 1\" : \"Player 2\"}`);\n            });\n\n            // Update the player turn element\n            async function updatePlayerTurn() {\n                const isPlayer1Turn = await contract.player1Turn();\n                const currentPlayer = isPlayer1Turn ? \"Player 1\" : \"Player 2\";\n                console.log(isPlayer1Turn);\n                playerTurnElement.innerText = `Current turn: ${currentPlayer}`;\n            }\n\n            // Update the player turn element initially\n            await updatePlayerTurn();\n\n            // Listen for TurnEnded events to update player turn\n            contract.on(\"TurnEnded\", () => {\n                updatePlayerTurn();\n            });\n        })();\n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "68d535bcbdaadb3c"
            ]
        ]
    },
    {
        "id": "d91bb0c6e4dcc391",
        "type": "http in",
        "z": "1b72e8d575aef462",
        "name": "",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 520,
        "wires": [
            [
                "f400539731192b8a"
            ]
        ]
    },
    {
        "id": "68d535bcbdaadb3c",
        "type": "http response",
        "z": "1b72e8d575aef462",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 690,
        "y": 520,
        "wires": []
    }
]